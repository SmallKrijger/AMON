"""

This script contains the functions to read data from different type of files.

This script requires multiple libraries that are written in the `requirements.txt` to be installed in your Python environnement. 
Make sure to install them properly with the right version.

"""

import numpy as np
import pandas as pd

def read_csv_wind_data(WS_BB, WD_BB):
    """Script that read data from csv file and return them without the column index and in the DataFrame format.

    Parameters
    ----------
    WS_BB : csv
        Wind sind speed data csv.
    WD_BB : csv
        Wind direction data csv.
    
    Returns
    -------
    WS[WS_column_name[0]] : DataFrame
        DataFrame object without the column index for the wind speed data csv.
    WD[WD_column_name[0]] : DataFrame
        DataFrame object without the column index for the wind direction data csv.
    """

    WS = pd.read_csv(WS_BB, index_col=0)
    WS_column_name = list(WS.columns)
    WD = pd.read_csv(WD_BB, index_col=0)
    WD_column_name = list(WD.columns)
    return WS[WS_column_name[0]], WD[WD_column_name[0]]

def read_param_file(param_file_name):
    """Script that read data from the param text file and return the different parameters.

    Parameters
    ----------
    param_file_name : str
        Path to the text file at the right format containing the parameters for the optimization.
    
    Returns
    -------
    nb_wt : int
        Number of wind turbines.
    diameter : int
        Diameter of a wind turbine.
    hub_height : int
        Hub height of a wind turbine.
    scale_factor : float
        Scale factor to re size the terrain if needed.
    power_curve : str
        Path to the power curve.
    boundary_file : str
        Path to the boundary file.
    exclusion_zone_file : str
        Path to the exclusion zone file.
    wind_speed : str
        Path to the wind speed csv.
    wind_direction : str
        Path to the wind direction csv.
    """

    # Read the file
    with open(param_file_name, "r") as file:
        content = file.read().splitlines() 

    nb_wt = int(content[0].split()[1])
    diameter = int(content[1].split()[1])
    hub_height = int(content[2].split()[1])
    scale_factor = float(content[3].split()[1])
    power_curve = content[4].split()[1]
    boundary_file = content[5].split()[1]
    exclusion_zone_file = content[6].split()[1]
    wind_speed = content[7].split()[1]
    wind_direction = content[8].split()[1]
               
    return nb_wt, diameter, hub_height, scale_factor, power_curve, boundary_file, exclusion_zone_file, wind_speed, wind_direction

def read_config_file(config_file_name, nb_wt):
    """Script that read data from the configuration text file and return the different parameters for the NOMAD solver.

    Parameters
    ----------
    config_file_name : str
        Path to the configuration text file at the right format containing the parameters for the NOMAD solver.
    nb_wt : int
        Number of wind turbines.
    
    Returns
    -------
    params : list
        List of parameters at the right format for the NOMAD solver.
    nb_it : int
        Number of evaluations for the NOMAD solver.
    """

    params = []
    # Read the file
    with open(config_file_name, "r") as file:
        content = file.read().splitlines()
    nb_it = int(content[3].split()[1])
    params = content
    for i in range(0, nb_wt, 2):
        params.append(f"VARIABLE_GROUP {i} {i+1}")
    return params, nb_it

def read_stat_file(total_budget, stat_file_name="nomad_result.0.txt"):
    """Script that read data from the stat text file generated by NOMAD and return the different results of its optimization.

    Parameters
    ----------
    total_budget : int
        Number of evaluations for the NOMAD solver.
    stat_file_name : str
        Path to the stat file generated by the NOMAD solver.
    
    Returns
    -------
    np_evals : array
        List of evaluations where the NOMAD solver could compute the objective function value.
    np_obj : array
        List of objective function values where the NOMAD solver could compute the objective function value.
    best_eval : list
        List of evaluations where the NOMAD solver improved the objective function value.
    best_of : list
        List of objective function values where the NOMAD solver improved the objective function value.
    """

    # Read the file
    with open(stat_file_name, "r") as file:
        content = file.readlines()

    # Extract the data we have 3 things per line separated by  spaces
    # The first value is the number of evaluations
    # The second value is the objective function value
    # The third value is the constraint value
    # The other values are the coordinates of the point
    # The last value is the running time
        
    # Extract the data
    nb_real_eval = []
    obj_values = []

    for line in content:
        data = line.split()
        if data[2] != 'inf':
            nb_real_eval.append(int(data[0]))
            obj_values.append(float(data[1])*10**(-6))

    np_evals = np.array(nb_real_eval)
    np_obj = np.array(obj_values)

    ## Getting the real successes
    best_obj = obj_values[0]
    best_of = [best_obj]
    best_eval = [0]
    for i,x in enumerate(obj_values):
        if x <= best_obj:
            best_of.append(x)
            best_eval.append(np_evals[i])
            best_obj = x

    best_eval.append(total_budget) # For nice finish of the graph
    best_of.append(best_of[-1]) # //
    return np_evals, np_obj, best_eval, best_of